name: cortex-prod-ci
on:
  push:
    branches: [master]
    tags:
      - v[0-9]+.[0-9]+.[0-9]+**
env:
  REPO: cortex
  IMAGE_DOWNLOAD_LOCATION: ../downloaded_images

jobs:
  configure:
    runs-on: [self-hosted, prod]
    outputs:
      containerUser: ${{ steps.get-user.outputs.containerUser }}
    
    steps:
      - id: get-user
        run: echo "::set-output name=containerUser::`id -u`:`id -g`"
  lint:
    needs: configure
    runs-on: [self-hosted, prod]
    container:
      image: quay.io/cortexproject/build-image:20210713_update-go-1.16.6-178ab0c4f
      env:
        ECR: ${{ env.ECR }}
        ORIGINAL_USER: ${{ needs.configure.outputs.containerUser }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Lint
        run: make BUILD_IN_CONTAINER=false lint
      - name: Check Vendor Directory
        run: make BUILD_IN_CONTAINER=false mod-check
      - name: Check Protos
        run: make BUILD_IN_CONTAINER=false check-protos
      - name: Check Generated Documentation
        run: make BUILD_IN_CONTAINER=false check-doc
      - name: Check White Noise.
        run: make BUILD_IN_CONTAINER=false check-white-noise
      - run: chown -R $ORIGINAL_USER $GITHUB_WORKSPACE
  secure:
    needs: configure
    runs-on: [self-hosted, prod]
    container:
      image: quay.io/cortexproject/build-image:2021w14_go1.16-afe06f021
      env:
        ECR: ${{ env.ECR }}
        ORIGINAL_USER: ${{ needs.configure.outputs.containerUser }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Run Gosec Security Scanner
        continue-on-error: true
        uses: securego/gosec@master
        with:
          args: ./...
      - run: chown -R $ORIGINAL_USER $GITHUB_WORKSPACE
  test:
    needs: configure
    runs-on: [self-hosted, prod]
    container:
      image: quay.io/cortexproject/build-image:20210713_update-go-1.16.6-178ab0c4f
      env:
        ECR: ${{ env.ECR }}
        ORIGINAL_USER: ${{ needs.configure.outputs.containerUser }}
    services:
      cassandra:
        image: cassandra:3.11
        env:
          JVM_OPTS: "-Xms1024M -Xmx1024M"
        ports:
          - 9042:9042
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Run Tests
        run: CASSANDRA_TEST_ADDRESSES=cassandra:9042 make BUILD_IN_CONTAINER=false test
      - run: chown -R $ORIGINAL_USER $GITHUB_WORKSPACE
  build:
    needs: configure
    runs-on: [self-hosted, prod]
    container:
      image: quay.io/cortexproject/build-image:20210713_update-go-1.16.6-178ab0c4f
      env:
        ECR: ${{ env.ECR }}
        ORIGINAL_USER: ${{ needs.configure.outputs.containerUser }}
    steps:
      - run: echo "ECR=$ECR" >> $GITHUB_ENV
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Check out amp-builds
        uses: actions/checkout@v2
        with:
          repository: aws-observability/amp-builds
          path: amp-builds
          token: ${{ secrets.MACHINE_PAT }}
      
      - name: Generate Tag
        uses: ./amp-builds/actions/generate-tag
        with:
          branch: master
          ref: ${{ github.ref }}
      - name: Install Docker Client
        run: ./.github/workflows/scripts/install-docker.sh
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Patch Dockerfile
        run: git apply ./.github/patches/Dockerfile.patch
      - name: Build Image
        run: |
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false
          mkdir /tmp/images
          ln -s /tmp/images ./docker-images
          make BUILD_IN_CONTAINER=false save-images IMAGE_TAG=$DOCKER_IMAGE_TAG
          tar -cvf images.tar /tmp/images
      - name: Upload Docker Images Artifact For Integ Test
        uses: actions/upload-artifact@v2
        with:
          name: Docker Images For Integ Test
          path: ./images.tar
      - name: Save Image
        uses: ./amp-builds/actions/save-image
        with:
          builtImage: quay.io/cortexproject/cortex:${{ env.DOCKER_IMAGE_TAG }}
          awsImage: ${{ env.ECR }}/${{ env.REPO }}:${{ env.DOCKER_IMAGE_TAG }}
          path: ".."
          fileName: images.tar
      - name: Upload Docker Images Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Docker Images
          path: ${{ runner.workspace }}/images.tar
      - name: Cleanup
        continue-on-error: true
        run: |
          rm -rf amp-builds
          rm ../images.tar
          docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'quay.io/cortexproject/')
      - run: chown -R $ORIGINAL_USER $GITHUB_WORKSPACE
  integration-configs-db:
    needs: build
    runs-on: [self-hosted, prod]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Download Docker Images Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Docker Images For Integ Test
      - name: Extract Docker Images Archive
        run: tar -xvf images.tar -C /
      - name: Run Integration Configs Tests
        # Github Actions does not support TTY in their default runners yet
        run: |
          touch build-image/.uptodate
          MIGRATIONS_DIR=$(pwd)/cmd/cortex/migrations
          make BUILD_IMAGE=quay.io/cortexproject/build-image:20210713_update-go-1.16.6-178ab0c4f TTY='' configs-integration-test
  integration:
    needs: integration-configs-db
    runs-on: [self-hosted, prod]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Check out amp-builds
        uses: actions/checkout@v2
        with:
          repository: aws-observability/amp-builds
          path: amp-builds
          token: ${{ secrets.MACHINE_PAT }}
      - name: Generate Tag
        uses: ./amp-builds/actions/generate-tag
        with:
          branch: master
          ref: ${{ github.ref }}
      - name: Download Docker Images Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Docker Images For Integ Test
      - name: Extract Docker Images Archive
        run: tar -xvf images.tar -C /
      - name: Load Docker Images
        run: |
          ls -la /tmp/images/
          ln -s /tmp/images ./docker-images
          ls -la ./docker-images
          make BUILD_IN_CONTAINER=false IMAGE_TAG=$DOCKER_IMAGE_TAG load-images
      - name: Preload Images
        # We download docker images used by integration tests so that all images are available
        # locally and the download time doesn't account in the test execution time, which is subject
        # to a timeout
        run: |
          docker pull minio/minio:RELEASE.2019-12-30T05-45-39Z
          docker pull amazon/dynamodb-local:1.11.477
          docker pull consul:1.8.4
          docker pull gcr.io/etcd-development/etcd:v3.4.7
          docker pull quay.io/cortexproject/cortex:v1.0.0
          docker pull quay.io/cortexproject/cortex:v1.1.0
          docker pull quay.io/cortexproject/cortex:v1.2.0
          docker pull quay.io/cortexproject/cortex:v1.3.0
          docker pull quay.io/cortexproject/cortex:v1.4.0
          docker pull quay.io/cortexproject/cortex:v1.5.0
          docker pull quay.io/cortexproject/cortex:v1.6.0
          docker pull quay.io/cortexproject/cortex:v1.7.0
          docker pull quay.io/cortexproject/cortex:v1.8.0
          docker pull quay.io/cortexproject/cortex:v1.9.0
          docker pull quay.io/cortexproject/cortex:v1.10.0
          docker pull shopify/bigtable-emulator:0.1.0
          docker pull rinscy/cassandra:3.11.0
          docker pull memcached:1.6.1
          docker pull bouncestorage/swift-aio:55ba4331
      - name: Integration Tests
        run: |
          export CORTEX_IMAGE_PREFIX="${IMAGE_PREFIX:-quay.io/cortexproject/}"
          export IMAGE_TAG=$DOCKER_IMAGE_TAG
          export CORTEX_IMAGE="${CORTEX_IMAGE_PREFIX}cortex:$IMAGE_TAG"
          export CORTEX_CHECKOUT_DIR=$GITHUB_WORKSPACE
          echo "Running integration tests with image: $CORTEX_IMAGE"
          go test -tags=requires_docker -timeout 2400s -v -count=1 ./integration/...
        env:
          IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX }}
  deploy:
    needs: [lint, secure, test, integration, integration-configs-db, build]
    runs-on: [self-hosted, prod]
    steps:
      - name: Make Directory
        run: mkdir -p $IMAGE_DOWNLOAD_LOCATION
      - name: Download Docker Images Artifact
        uses: actions/download-artifact@v2
        with:
          name: Docker Images
          path: ${{ env.IMAGE_DOWNLOAD_LOCATION }}

      - name: Check out amp-builds
        uses: actions/checkout@v2
        with:
          repository: aws-observability/amp-builds
          path: amp-builds
          token: ${{ secrets.MACHINE_PAT }}

      - name: Push to ECR
        uses: ./amp-builds/actions/push-to-ecr
        with:
          imageDownloadLocation: ${{ env.IMAGE_DOWNLOAD_LOCATION }}
          repoName: ${{ env.REPO }}
          tagLatest: true
