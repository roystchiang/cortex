name: cortex-prod-ci
on:
  push:
    # will run on all changes to master, with image tag being master-<commit sha>
    branches: [master]
    # will run on all new tags, with image tag being the same as the GitHub tag
    tags:
      - v[0-9]+.[0-9]+.[0-9]+**
env:
  ECR: 396262249347.dkr.ecr.us-east-1.amazonaws.com/cortex
  GH_REF: ${{ github.ref }}
  IMAGE_DOWNLOAD_LOCATION: ../downloaded_images

jobs:
  lint:
    runs-on: [self-hosted, prod]
    container:
      image: quay.io/cortexproject/build-image:upgrade-build-image-debian-491e60715-WIP
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Lint
        run: make BUILD_IN_CONTAINER=false lint
      - name: Check Vendor Directory
        run: make BUILD_IN_CONTAINER=false mod-check
      - name: Check Protos
        run: make BUILD_IN_CONTAINER=false check-protos
      - name: Check Generated Documentation
        run: make BUILD_IN_CONTAINER=false check-doc
      - name: Check White Noise.
        run: make BUILD_IN_CONTAINER=false check-white-noise
  secure:
    runs-on: [self-hosted, prod]
    container:
      image: quay.io/cortexproject/build-image:upgrade-build-image-debian-491e60715-WIP
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Run Gosec Security Scanner
        continue-on-error: true
        uses: securego/gosec@master
        with:
          args: ./...
  test:
    runs-on: [self-hosted, prod]
    container:
      image: quay.io/cortexproject/build-image:upgrade-build-image-debian-491e60715-WIP
    services:
      cassandra:
        image: cassandra:3.11
        env:
          JVM_OPTS: "-Xms1024M -Xmx1024M"
        ports:
          - 9042:9042
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Run Tests
        run: CASSANDRA_TEST_ADDRESSES=cassandra:9042 make BUILD_IN_CONTAINER=false test
  build:
    runs-on: [self-hosted, prod]
    container:
      image: quay.io/cortexproject/build-image:upgrade-build-image-debian-491e60715-WIP
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Generate Tag
        shell: bash
        run: ./.github/workflows/scripts/generate-tag.sh
      - name: Install Docker Client
        run: ./.github/workflows/scripts/install-docker.sh
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Build Image
        run: |
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false
      - name: Save Image
        shell: bash
        run: |
          cd ..
          CORTEX_LOCAL_IMAGE="quay.io/cortexproject/cortex:$DOCKER_IMAGE_TAG"
          CORTEX_IMAGE=$ECR:$DOCKER_IMAGE_TAG
          mkdir -p docker-images
          echo "$CORTEX_LOCAL_IMAGE  ->  $CORTEX_IMAGE"
          docker tag $CORTEX_LOCAL_IMAGE $CORTEX_IMAGE
          docker save $CORTEX_IMAGE -o docker-images/$(echo $CORTEX_IMAGE | tr "/" _)
          echo $CORTEX_IMAGE > docker-images/image-name
      - name: Create Docker Images Archive
        run: cd .. && tar -cvf images.tar docker-images
      - name: Upload Docker Images Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Docker Images
          path: ${{ runner.workspace }}/images.tar
      - name: Cleanup
        continue-on-error: true
        run: |
          rm ../images.tar
          rm -rf ../docker-images
          docker rmi "$ECR:$DOCKER_IMAGE_TAG" -f
          docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'quay.io/cortexproject/')
  deploy:
    needs: [lint, secure, test, build]
    runs-on: [self-hosted, prod]
    steps:
      - name: Make Directory
        run: mkdir -p $IMAGE_DOWNLOAD_LOCATION
      - name: Download Docker Images Artifact
        uses: actions/download-artifact@v2
        with:
          name: Docker Images
          path: ${{ env.IMAGE_DOWNLOAD_LOCATION }}
      - name: Load Docker Image
        run: |
          cd $IMAGE_DOWNLOAD_LOCATION
          tar -xvf images.tar
          CORTEX_IMAGE=$(cat docker-images/image-name)
          echo "CORTEX_IMAGE=$CORTEX_IMAGE" >> $GITHUB_ENV
          docker load -i docker-images/$(echo $CORTEX_IMAGE | tr "/" _)
          docker tag $CORTEX_IMAGE $ECR:latest
          docker images
      - name: Push to ECR
        # Self hosted runner manages authentication, no need to worry about docker login
        run: |
          cd $IMAGE_DOWNLOAD_LOCATION
          echo "Pushing $CORTEX_IMAGE and $ECR:latest"
          docker push $CORTEX_IMAGE
          docker push $ECR:latest
      - name: Cleanup
        continue-on-error: true
        run: |
          rm -rf $IMAGE_DOWNLOAD_LOCATION
          docker rmi $ECR:latest -f
          docker rmi $CORTEX_IMAGE -f
