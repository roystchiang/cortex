name: cortex-dev-ci
on:
  push:
    # will run on all changes to master, with image tag being master-<commit sha>
    branches: [master]
    # will run on all new tags, with image tag being the same as the GitHub tag
    tags:
      - v[0-9]+.[0-9]+.[0-9]+**
jobs:
  lint:
    # TODO: should be [self-hosted, prod] for production
    runs-on: [self-hosted, dev]
    container:
      image: quay.io/cortexproject/build-image:upgrade-build-image-debian-491e60715-WIP
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Lint
        run: make BUILD_IN_CONTAINER=false lint
      - name: Check Vendor Directory
        run: make BUILD_IN_CONTAINER=false mod-check
      - name: Check Protos
        run: make BUILD_IN_CONTAINER=false check-protos
      - name: Check Generated Documentation
        run: make BUILD_IN_CONTAINER=false check-doc
      - name: Check White Noise.
        run: make BUILD_IN_CONTAINER=false check-white-noise
  test:
    # TODO: should be [self-hosted, prod] for production
    runs-on: [self-hosted, dev]
    container:
      image: quay.io/cortexproject/build-image:upgrade-build-image-debian-491e60715-WIP
    services:
      cassandra:
        image: cassandra:3.11
        env:
          JVM_OPTS: "-Xms1024M -Xmx1024M"
        ports:
        - 9042:9042
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Run Tests
        run: CASSANDRA_TEST_ADDRESSES=cassandra:9042 make BUILD_IN_CONTAINER=false test
  build:
    # TODO: should be [self-hosted, prod] for production
    runs-on: [self-hosted, dev]
    container:
      image: quay.io/cortexproject/build-image:upgrade-build-image-debian-491e60715-WIP
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Docker Client
        run: ./.github/workflows/scripts/install-docker.sh
      - name: Sym Link Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Build Image
        run: |
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false
      - name: Save Image
        run: |
          mkdir docker-images
          export CORTEX_IMAGE="quay.io/cortexproject/cortex:${TAG:-$(./tools/image-tag)}"
          docker save $CORTEX_IMAGE -o docker-images/$(echo $CORTEX_IMAGE | tr "/" _)
          echo "${TAG:-$(./tools/image-tag)}" > docker-images/tag
        env:
          TAG: ${{ github.event.push.tag_name }}
      - name: Create Docker Images Archive
        run: tar -cvf images.tar docker-images
      - name: Upload Docker Images Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Docker Images
          path: ./images.tar
  deploy:
    needs: [lint, test, build]
    if: (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) && github.repository == 'aws-observability/cortex-dev'
    # TODO: should be [self-hosted, prod] for production
    runs-on: [self-hosted, dev]
    steps:
      # we use this directory instead of /actions-runner/_work/cortex-dev/cortex-dev
      # because of folder ownership issues
      - name: Make Directory
        run: |
          if [ ! -d "/actions-runner/_work/image_downloads/" ] 
          then
            mkdir /actions-runner/_work/image_downloads/
          fi
      - name: Download Docker Images Artifact
        uses: actions/download-artifact@v2
        with:
          name: Docker Images
          path: /actions-runner/_work/image_downloads/
      - name: Load Docker Image
        run: |
          cd /actions-runner/_work/image_downloads/
          tar -xvf images.tar
          export TAG=$(cat docker-images/tag)
          docker load -i docker-images/quay.io_cortexproject_cortex:$TAG
      - name: Push to ECR
        # TODO: Deploy image account should be 095566055637 instead of 595926772921 for production
        # Self hosted runner manages authentication, no need to worry about docker login
        run: |
          cd /actions-runner/_work/image_downloads/
          export TAG=$(cat docker-images/tag)
          export CORTEX_IMAGE="quay.io/cortexproject/cortex:$TAG"
          export DEPLOY_IMAGE="595926772921.dkr.ecr.us-west-2.amazonaws.com/cortex:$TAG"
          echo "$CORTEX_IMAGE  ->  $DEPLOY_IMAGE"
          docker tag $CORTEX_IMAGE $DEPLOY_IMAGE
          docker push $DEPLOY_IMAGE
          rm -rf docker-images/

